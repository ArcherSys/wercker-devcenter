---
sidebar_current: "werckeryml"
---

  <script type="text/javascript" src="/assets/validate-yaml/wercker-schema.js" ></script>
  <script type="text/javascript" src="/assets/validate-yaml/js/jquery-2.0.2.min.js" ></script>
  <script type="text/javascript" src="/assets/validate-yaml/js/underscore-min.js" ></script>
  <script type="text/javascript" src="/assets/validate-yaml/js/async.js" ></script>
  <script type="text/javascript" src="/assets/validate-yaml/js/JSV/uri/uri.js" ></script>
  <script type="text/javascript" src="/assets/validate-yaml/js/JSV/uri/schemes/urn.js" ></script>
  <script type="text/javascript" src="/assets/validate-yaml/js/JSV/jsv.js" ></script>
  <script type="text/javascript" src="/assets/validate-yaml/js/JSV/json-schema-draft-03.js" ></script>
  <script type="text/javascript" src="/assets/validate-yaml/js/js-yaml.js" ></script>


 <script>

    function makeSummary (box, services, buildSteps) {
      $("#validate__loader").addClass("force-hidden");
      var result = "<span class='summary__header'>Your wercker.yml will use the box <strong>" + box.name + "</strong></span>" +
        "<span class='summary__description'>" + box.description + "</span>" ;

      if(!!services && services.length > 0){
        result += "<span><strong>Services:</strong></span>";
        _.each(services, function (service) {
          result += "<span><em>" + service.name + ": </em>" + service.description + "</span>"
        });

      }
      result += "<span><strong>Steps:</strong></span>"
      _.each(buildSteps, function (buildStep) {
        result += "<span><em>" + buildStep.name + ": </em>" + buildStep.description + "</span>"
      });

      $("#summary").html(result);
      createPipeline(box,buildSteps);
    }
    function createPipeline (box, buildSteps) {
      $("#validate__summary").toggleClass("force-hidden");
      $("#box-name").html("");
      $("#build-steps").html("");

      _.each(buildSteps, function (buildStep) {
        $("<span class=\"step\">").html('<i class="icon-down_arrows"></i>' + buildStep.name).appendTo("#build-steps");
      })

      $("#box-name").html(box.name);
    }

    function showError (message) {
      $("#validate__error").toggleClass("force-hidden", false);
      $("#validate__loader").addClass("force-hidden");
      $("#errors").html(message);
    }

    function hasMixedIdentation (yaml) {
      var lines = yaml.split('\n')
      var startPattern = new RegExp("^[ \t]+")
      hasSpaces = false;
      hasTabs = false;


      for (var i = 0; i < lines.length; i++) {
        var startCharsResult = startPattern.exec(lines[i])
        if(startCharsResult){
          var startChars = startCharsResult[0]
          if(!hasSpaces && startChars.indexOf(" ") !== -1 ){
            hasSpaces = true;
          }
          if(!hasTabs && startChars.indexOf("\t") !== -1 ){
            hasTabs = true;
          }

          if( hasTabs && hasSpaces){
            return true;
          }
        }
      };

      return false;
    }

    var cachedBoxes = {};
    function getBox (fullname, callback) {
      if(cachedBoxes[fullname]){
        return callback(null, cachedBoxes[fullname]);
      }
      var boxName = fullname;
      var boxVersion = "*"
      if(boxName.split("@").length > 1){
        boxName = fullname.split("@")[0]
        boxVersion = fullname.split("@")[1]
      }

      $.getJSON("http://app.wercker.com/api/v2/boxes/" + boxName + "/" + boxVersion + "?callback=?",function  (data) {
        if(data){
          cachedBoxes[fullname] = data;
        }
        callback(null, data);
      }).fail(function  (error) {
        if(error.status === 404){
          callback(null, null);
        }
        else{
          callback(error)
        }
      });
    }

    var cachedSteps = {};
    function getStep (fullname, callback) {
      if(!_.isString(fullname)){
        try{
          fullname = Object.keys(fullname)[0];
        }
        catch(e){
          console.log(e);
          callback(e)
        }
      }
      if(cachedSteps[fullname]){
        return callback(null, cachedSteps[fullname]);
      }

        var stepName = fullname;
      var stepVersion = "*"
      if(stepName.split("@").length > 1){
        stepName = fullname.split("@")[0]
        stepVersion = fullname.split("@")[1]
      }
      if(stepName.indexOf("/") === -1){
        stepName = "wercker/" + stepName;
      }

      $.getJSON("http://app.wercker.com/api/v2/steps/" + stepName + "/" + stepVersion + "?callback=?",function  (data) {
        if(data){
          cachedSteps[fullname] = data;
        }
        callback(null, data);
      }).fail(function  (error) {
        if(error.status === 404){
          callback(null, null);
        }
        else{
          callback(error)
        }
      });
    }

    function validateBox (box, callback) {
      // var boxName = box;
      // var boxVersion = "*"
      // if(boxName.split("@").length > 1){
      //   boxName = box.split("@")[0]
      //   boxVersion = box.split("@")[1]
      // }
      getBox(box, function  (error, boxData) {
        if(error){
          return showError(JSON.stringify(error))
        }
        if(!boxData){
          return showError("Box '" + box + "' does not exist in de the registry.")
        }
        return callback(null, boxData)
      });

    }

    function validateServices (services, callback) {
      var result = [];
      if (!services || services.length === 0) {
        return callback(null,result)
      }

      async.eachSeries(services, function (service, eachNext) {
        getBox(service, function (error, boxData) {
        if(error){
          return callback(JSON.stringify(error))
        }
        if(!boxData){
          return callback("Service '" + service + "' does not exist in de the registry.")
        }
        result.push(boxData);
        return eachNext()

        });

      }, function (error) {

          return callback(error,result)


      });

    }

    $(function () {


      createTextAreaWithLines('wercker-yml-input');

      $("#fix-tabs-button").on("click", function () {
        var yaml = $("#wercker-yml-input").val()
        yaml = yaml.replace(/\t/g,"  ")
        $("#wercker-yml-input").val(yaml)
      });

      $("#check-button").on("click", function () {
        $("#validate__error").addClass("force-hidden", false);
        $("#validate__summary").addClass("force-hidden", false);
        $("#validate__fixtabs").addClass("force-hidden");
        $("#errors").html("");
        $("#summary").html("");
        var yaml = $("#wercker-yml-input").val();
        if(hasMixedIdentation(yaml)){
          return $("#validate__fixtabs").removeClass("force-hidden");
        }
        $("#validate__loader").removeClass("force-hidden");

        var doc = {};
        try{
          doc = jsyaml.load(yaml);
        }
        catch(error){

          return showError(error.message.replace("\n","</br>"));
        }
        var environmentId = "json-schema-draft-03";
        var environment = JSV.createEnvironment(environmentId);
      var report = environment.validate(doc, schema);
      if(report.errors.length !== 0){
        var errorMessage = "";
        _.each(report.errors, function (error) {
          console.log(error)
          var elementName = error.schemaUri.replace("http://jsonschema.net", "").replace("#", "")
          if(elementName === ""){
            elementName = "root";
          }
          errorMessage += error.message + ": " + elementName + "\n";
        });
        errorMessage = errorMessage.replace("\n","</br>");
        return showError(errorMessage);
      }

      validateBox(doc.box, function  (error, boxData) {
        if(error){
          return showError(error)
        }
        validateServices(doc.services, function (error, servicesData) {

          if(error){
            return showError(error)
          }


        buildSteps = []

        if(doc && doc.build && doc.build.steps ){
          async.eachSeries(doc.build.steps, function (step, eachNext) {

            if(!_.isString(step)){
              try{
                step = Object.keys(step)[0];
              }
              catch(e){
                return eachNext(e);
              }
            }
            if(step === "script"){
              buildSteps.push({name : "script", description : "Runs your script defined in code element."})
              return eachNext()
            }

            getStep(step, function  (error, stepData) {
              if(error){
                return eachNext(error);
              }
              if(!stepData){
                return showError("Step '" + step + "' does not exist in the registry.");
              }
              buildSteps.push(stepData);
              eachNext()
            })

          }, function (error) {
                        makeSummary(boxData, servicesData, buildSteps);
          });

        }
        else{
          makeSummary(boxData,servicesData, [])
        }

      });
      });

      });


    })
 </script>



<style>

      textarea {font-size:100%;}
      #wercker-yml-input{
          margin-left:30px;
          padding-left:3px;
          width:600px;
          height:200px;
          border:1px solid #666;
          font-family: monospace;
      }
     .textAreaWithLines{
         display:block;
         margin:0;
         border:1px solid #666;
         border-right:none;
         background:#aaa;
         font-family: monospace;
      }
    </style>
    <script type="text/javascript">
       var move = false;
      function createTextAreaWithLines(id)
      {
        var el = document.createElement('TEXTAREA');
        var ta = document.getElementById(id);

        var string = '';
        for(var no=1;no<300;no++){
          if(string.length>0)string += '\n';
          string += no;
        }

        el.className      = 'textAreaWithLines';
        el.style.height   = (ta.offsetHeight-3) + "px";
        el.style.width    = "35px";
        el.style.position = "absolute";
        el.style.overflow = 'hidden';
        el.style.textAlign = 'right';
        el.style.paddingRight = '0.2em';
        $(el).val(string)
        el.style.zIndex   = 0;
        ta.style.zIndex   = 1;
        ta.style.position = "relative";
        ta.parentNode.insertBefore(el, ta.nextSibling);
        setLine();
        ta.focus();

        ta.onkeydown    = function() { setLine(); }
        ta.onscroll    = function() { setLine(); }
        ta.onmousedown  = function() { setLine(); move=true; }
        ta.onmouseup    = function() { setLine(); move=false; }
        ta.onmousemove  = function() { if(move){setLine();} }

        function setLine(){
          el.scrollTop   = ta.scrollTop;
          el.style.top   = (ta.offsetTop) + "px";
          el.style.left  = (ta.offsetLeft - 37) + "px";
        }
      }
    </script>

<div class="validate">

  <h1>Validate wercker.yml</h1>

  <textarea class="validate__area" id="wercker-yml-input" name="wercker-yml-input" >box: wercker/default
  build:
    steps:
      - jshint
      - script:
          code: echo 1
  </textarea>

  <button class="button medium radius text-center" id="check-button">Check my wercker.yml</button>

  <hr/>

  <div class="force-hidden" id="validate__loader">
    Validating...
  </div>

  <div class="force-hidden" id="validate__fixtabs">
    Your YAML contains tabs and spaces as identation. <button class="button medium radius text-center" id="fix-tabs-button">Replace tabs with 2 spaces.</button>
  </div>

  <div class="force-hidden" id="validate__error">
    <h3>Errors</h3>
    <div class="validate__feedback" id="errors"></div>
    <hr/>
  </div>

  <div class="force-hidden" id="validate__summary">
    <h3>Summary</h3>
    <div class="validate__feedback" id="summary"></div>
    <hr/>
    <h3>Pipeline</h3>
    <div class="validate__pipeline" id="pipeline">
      <span class="step">get code<i class="icon-down_arrows"></i></span>
      <div class="box">
        <span class="box-label" id="box-name">boxname</span>
        <div class="box-steps">
          <span class="step">setup environment<i class="icon-down_arrows"></i></span>
          <span class="step">environment variables<i class="icon-down_arrows"></i></span>
          <span id="build-steps"></span>
          <span class="step">package</span>
        </div>
      </div>
    </div>
    <hr/>
  </div>
</div>

<div class="authorCredits">
    <span class="profile-picture">
        <img src="https://secure.gravatar.com/avatar/37936f9de593de18c525a8e2f5707834?d=identicon&s=192" alt="Micha Hernandez van Leuffen"/>
    </span>
    <ul class="authorCredits">

        <!-- author info -->
        <li class="authorCredits__name">
            <h4>Wouter Mooij</h4>
            <em>
                Wouter is cofounder and CTO at wercker.
            </em>
        </li>

        <!-- info -->
        <li>
            <a href="http://beta.wercker.com" target="_blank">
                <i class="icon-company"></i> <em>wercker</em>
            </a>
            <a href="http://twitter.com/wwwouter" target="_blank">
                <i class="icon-twitter"></i>
                <em> wwwouter</em>
            </a>
        </li>

    </ul>
</div>
<hr/>
<h5>Oct 29, 2013</h5>
<hr/>

